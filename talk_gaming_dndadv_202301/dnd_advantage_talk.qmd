---
title: "Taking Advantage"
subtitle: "An Analysis of Advantage/Disadvantage in the D20 System"
author: "Mick Cooney <mickcooney@gmail.com>"
editor: source
execute:
  message: false
  warning: false
  error: false
format:
  revealjs:
    self-contained: true
    theme: night
    highlight: pygments
    controls: true
    center-title-slide: true
    center: true
    slide-number: true
    slide-level: 3
    show-slide-number: all
    navigation-mode: vertical
    progress: true

---

```{r knit_opts}
#| include: false

library(conflicted)
library(tidyverse)
library(magrittr)
library(rlang)
library(scales)
library(cowplot)
library(directlabels)



source("lib_utils.R")


conflict_lst <- resolve_conflicts(
  c("xml2", "magrittr", "rlang", "dplyr", "readr", "purrr", "ggplot2")
  )


options(
  width = 80L,
  warn  = 1,
  mc.cores = parallelly::availableCores()
  )

theme_set(theme_cowplot())

set.seed(42)
```



# Background

---

Who Am I?


## Dublin Data Science

![](img/dds_pedro.png)



## Goals

\

Test Intuition

\

Simulate Mechanisms

\

Illustrate Typical Examples



# Setting Up

---


Discrete space

\

No need for simulation

---

\


\begin{eqnarray*}
1d20 &\rightarrow&  20 \text{ possible outcomes} \\
2d20 &\rightarrow& 400 \text{ possible outcomes}
\end{eqnarray*}

---

Create table of outcomes for 2d20.

\

\begin{eqnarray*}
\text{Straight: }   &\rightarrow& \text{ use first die} \\
\text{Adv/Disadv: } &\rightarrow& \text{ use max/min of two dice} \\
\text{ROLL(P/M)#: } &\rightarrow& \text{ adjust first die}
\end{eqnarray*}


---

```{r construct_full_outcomes_table}
#| echo: false

outcomes_tbl <- expand_grid(
    d1 = 1:20,
    d2 = 1:20
    ) |>
  mutate(
    Straight     = d1,
    Advantage    = pmax(d1, d2),
    Disadvantage = pmin(d1, d2)
    )

outcomes_extra_tbl <- outcomes_tbl |>
  mutate(
    RollP1       = pmin(20, d1 + 1),
    RollP2       = pmin(20, d1 + 2),
    RollP3       = pmin(20, d1 + 3),
    RollM1       = pmax(1, d1 - 1),
    RollM2       = pmax(1, d1 - 2),
    RollM3       = pmax(1, d1 - 3)
    )

outcomes_tbl |>
  head(7) |>
  knitr::kable()
```

---

```{r plot_histograms_roll}
#| echo: false
roll_type_levels <- c(
  "Straight", "Advantage", "Disadvantage",
  "RollP1", "RollP2", "RollP3",
  "RollM1", "RollM2", "RollM3"
  )


outcomes_long_tbl <- outcomes_extra_tbl |>
  pivot_longer(
    cols      = !c(d1, d2),
    names_to  = "roll_type",
    values_to = "outcome"
    ) |>
  mutate(
    roll_type = factor(
      roll_type,
      levels = roll_type_levels
      )
    )

plot_tbl <- outcomes_long_tbl |>
  filter(
    roll_type %in% c("Straight", "Advantage", "Disadvantage")
    )

ggplot(plot_tbl) +
  geom_histogram(
    aes(x = outcome, fill = roll_type),
    position = "dodge", binwidth = 1) +
  scale_fill_brewer(type = "qual", palette = "Set2") +
  labs(
    x = "Outcome",
    y = "Count",
    fill = "Roll Type",
    title = "Histogram of Dice-roll Outcomes"
    )
```

---

```{r plot_props_comparison}
#| echo: false

outcomes_prop_tbl <- outcomes_long_tbl |>
  group_by(roll_type) |>
  count(outcome) |>
  mutate(
    prop = n / sum(n)
    ) |>
  ungroup()

plot_tbl <- outcomes_prop_tbl |>
  filter(
    roll_type %in% c("Straight", "Advantage", "Disadvantage")
    )

ggplot(plot_tbl) +
  geom_col(aes(x = outcome, y = prop, fill = roll_type), position = "dodge") +
  scale_fill_brewer(type = "qual", palette = "Set2") +
  labs(
    x = "Outcome",
    y = "Proportion",
    fill = "Roll Type",
    title = "Probabilities of Dice Roll Outcome"
    )
```

---

```{r calculate_cumulative_probabilities}
#| echo: false

calculate_cumulative_probabilities <- function(outcomes_tbl) {
  dice_roll <- 1:20
  
  cuml_prob <- outcomes_tbl |>
    pull(outcome) |>
    ecdf() |> 
    exec(dice_roll - 0.1)
  
  cuml_prob_tbl <- tibble(
    target_roll = dice_roll,
    success_prob = 1 - cuml_prob,
    failure_prob = cuml_prob
    )
  
  return(cuml_prob_tbl)
}
```


```{r plot_failure_probabilities}
#| echo: false

outcomes_cumlprob_tbl <- outcomes_long_tbl |>
  group_nest(roll_type) |>
  mutate(
    cuml_data = map(data, calculate_cumulative_probabilities)
    ) |>
  select(-data) |>
  unnest(cuml_data)

plot_tbl <- outcomes_cumlprob_tbl |>
  filter(
    roll_type %in% c("Straight", "Advantage", "Disadvantage")
    )

ggplot(plot_tbl) +
  geom_line(aes(x = target_roll, y = failure_prob, colour = roll_type)) +
  scale_colour_brewer(type = "qual", palette = "Set1") +
  labs(
    x = "Target Roll",
    y = "Failure Probability",
    colour = "Roll Type",
    title  = "Probability of Failure by Target Roll"
  )
```



# Analysing Failure


---

```{r plot_failure_ratios}
#| echo: false

ref_probs_tbl <- outcomes_cumlprob_tbl |>
  filter(
    roll_type == "Straight"
    ) |>
  transmute(
    target_roll, ref_prob = failure_prob
    )

failure_ratios_tbl <- outcomes_cumlprob_tbl |>
  inner_join(ref_probs_tbl, by = "target_roll") |>
  mutate(
    failure_ratio = failure_prob / ref_prob,
    failure_perc  = failure_ratio - 1
    )


ggplot(failure_ratios_tbl, aes(x = target_roll, y = failure_perc, colour = roll_type)) +
  geom_line() +
  geom_point() +
  geom_dl(aes(label = roll_type), method = "angled.boxes") +
  scale_colour_brewer(type = "qual", palette = "Set1") +
  expand_limits(x = 0) +
  labs(
    x = "Target Roll",
    y = "Change in Probability",
    colour = "Roll Type",
    title = "Plot of Failure Ratios"
    )
```

---

```{r plot_failure_ratios_middle}
#| echo: false

plot_tbl <- failure_ratios_tbl |>
  filter(target_roll >= 5, target_roll <= 15)

ggplot(plot_tbl, aes(x = target_roll, y = failure_perc, colour = roll_type)) +
  geom_line() +
  geom_point() +
  geom_dl(aes(label = roll_type), method = "angled.boxes") +
  scale_colour_brewer(type = "qual", palette = "Set1") +
  expand_limits(x = c(4, 16)) +
  labs(
    x = "Target Roll",
    y = "Prob Ratio",
    colour = "Roll Type",
    title = "Plot of Failure Ratios (5 to 15)"
    )
```


---

```{r plot_failure_ratios_high}
#| echo: false

plot_tbl <- failure_ratios_tbl |>
  filter(target_roll >= 15)

ggplot(plot_tbl, aes(x = target_roll, y = failure_perc, colour = roll_type)) +
  geom_line() +
  geom_point() +
  geom_dl(aes(label = roll_type), method = "angled.boxes") +
  scale_colour_brewer(type = "qual", palette = "Set1") +
  expand_limits(x = 14) +
  labs(
    x = "Target Roll",
    y = "Prob Ratio",
    colour = "Roll Type",
    title = "Plot of Failure Ratios (15 and up)"
    )
```


## The Champion

\

Subclass of Fighter

\

Critical Hit on 19 or 20

---

What is the impact of advantage / disadvantage

---

```{r show_champion_crit_probs}
#| echo: false

outcomes_cumlprob_tbl |>
  filter(
    target_roll %in% c(19,20),
    roll_type %in% c("Straight", "Advantage", "Disadvantage")
    ) |>
  transmute(
    `Roll Type`    = roll_type,
    `Target`       = target_roll,
    `Success Prob` = success_prob |> round(4),
    `Failure Prob` = failure_prob |> round(4)
    ) |>
  knitr::kable()
```

---

```{r heatmap_crit_probs}
#| echo: false

plot_heatmap_tbl <- outcomes_cumlprob_tbl |>
  filter(
    target_roll %in% c(19,20),
    roll_type %in% c("Straight", "Advantage", "Disadvantage")
    ) |>
  transmute(
    roll_type,
    target_roll  = target_roll |> as.character(),
    success_prob = success_prob,
    prob_label   = sprintf("%6.4f", success_prob)
    )

ggplot(plot_heatmap_tbl) +
  geom_tile(aes(x = roll_type, y = target_roll, fill  = success_prob)) +
  geom_text(aes(x = roll_type, y = target_roll, label = prob_label), size = 6) +
  scale_fill_gradient(low = "blue", high = "red") +
  labs(
    x     = "Roll Type",
    y     = "Target",
    fill  = "Success Prob",
    title = "Comparison of Champion Critical Probabilities"
    )
```


# Opposed Rolls

---

Resolve Contests

\

Both Roll 1d20, add bonus

---

Discrete Space

\

Bigger and messier

\

Use simulation


## Probabilities Comparison

---

```{r construct_opposed_roll_setups}
create_opposed_roll <- function(AD1, AD2, diff) {
  
  resolve_func <- function(outcome_data_tbl) {
    resolve_tbl <- outcome_data_tbl |>
      mutate(
        p1 = case_when(
          AD1 == "A" ~ pmax(P1d1, P1d2),
          AD1 == "D" ~ pmin(P1d1, P1d2),
          TRUE ~ P1d1
          ),
        p2 = case_when(
          AD2 == "A" ~ pmax(P2d1, P2d2),
          AD2 == "D" ~ pmin(P2d1, P2d2),
          TRUE ~ P2d1
          ),
        p1_success = (p1 + diff > p2),
        p2_success = (p1 + diff < p2)
        )
    
    return(resolve_tbl)
  }
  
  return(resolve_func)
}
```

```{r create_opposed_roll_simulations}
#| echo: false

n_sims <- 100000

sims_output_tbl <- tibble(sim_id = 1:n_sims) |>
  mutate(
    P1d1 = sample(1:20, size = n(), replace = TRUE),
    P1d2 = sample(1:20, size = n(), replace = TRUE),
    P2d1 = sample(1:20, size = n(), replace = TRUE),
    P2d2 = sample(1:20, size = n(), replace = TRUE)
    )

calc_success_probs <- \(x) x |>
  summarise(
    prob = sum(p1_success) / n()
    ) |>
  pull(prob)

calc_failure_probs <- \(x) x |>
  summarise(
    prob = sum(p2_success) / n()
    ) |>
  pull(prob)


opp_contest_tbl <- expand_grid(
    AD1  = c("A", "D", "S"),
    AD2  = c("A", "D", "S"),
    diff = seq(-8, 8, by = 1)
    ) |>
  mutate(
    contest_key  = str_c(AD1, AD2, sep = ""),
    resolve_func = pmap(
      list(AD1 = AD1, AD2 = AD2, diff = diff),
      create_opposed_roll
      ),
    outcome_data = map(
      resolve_func, exec,
      outcome_data_tbl = sims_output_tbl
      ),
    p1_success = map_dbl(outcome_data, calc_success_probs),
    p2_success = map_dbl(outcome_data, calc_failure_probs)
    )
```


```{r plot_opposed_lineplots}
#| echo: false

plot_oppprob_data_tbl <- opp_contest_tbl |>
  transmute(
    AD1, AD2, contest_key, diff, p1_success,
    p1_success_lab = sprintf("%4.2f / %4.2f", p1_success, p2_success)
    )

ggplot(plot_oppprob_data_tbl, aes(x = diff, y = p1_success, colour = contest_key)) +
  geom_line() +
  geom_point() +
  scale_x_continuous(breaks = seq(-8, 8, by = 2)) +
  expand_limits(y = 0) +
  geom_dl(aes(label = contest_key), method = "last.bumpup") +
  labs(
    x      = "P1 Bonus Difference",
    y      = "Probability of Success",
    colour = "Contest Key",
    title  = "Comparison of Opposed Probabilities"
    )

```


---


```{r plot_opposed_heatmap}
#| echo: false

ggplot(plot_oppprob_data_tbl) +
  geom_tile(aes(x = contest_key, y = diff, fill  = p1_success)) +
  geom_text(aes(x = contest_key, y = diff, label = p1_success_lab), size = 3) +
  expand_limits(fill = 1) +
  scale_y_continuous(breaks = seq(-8, 8, by = 2)) +
  scale_fill_gradient(low = "blue", high = "red") +
  labs(
    x     = "Contest",
    y     = "Modifier Difference",
    fill  = "Success Prob",
    title = "Comparison of Opposed Probabilities"
    )
```

# Thank You!

\


This talk...

[https://github.com/kaybenleroll/data_workshops/talk_gaming_dndadv_202301]()

\












